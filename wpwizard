#!/bin/bash
#
# This script was created to cut down on the amount of time it takes
# to get a local install of WordPress up and running by automating the
# things we do over and over: download WordPress, create a database, run the
# install, download our favorite plugins, etc, etc.
#
# Additionally, this script is meant to help with multi-environment deployment
# using Aaron Holbrook's WordPress/Git deployment model (http://aaronjholbrook.com/?=310)
#
# Originally Created by Aaron Holbrook (@aaronjholbrook)
# Made awesome-er by Brad Parbs (@bradparbs)





clear
echo ""
echo -e "\033[34m      Welcome to wpWizard!                         "
echo "                 __    __ _                  _    "
echo "  __      ___ __/ / /\ \ (_)______ _ _ __ __| |   "
echo "  \ \ /\ / / '_ \ \/  \/ / |_  / _| | '__/ _| |   "
echo "   \ V  V /| |_) \  /\  /| |/ / (_| | | | (_| |   "
echo "    \_/\_/ | .__/ \/  \/ |_/___\__,_|_|  \__,_|   "
echo "           |_|                                    "
echo '                                                  '
echo "     Forked from Aaron Holbrook's wpbuildr!       "
echo '--------------------------------------------------'
echo -e "\033[0m "

USECURL=$(command -v wget);

if [ ! $1 ]; then
    read -p "What directory would you like to create to contain the site? (leaving this blank will install in current directory) " foldername
else
    foldername=$1
fi


# create the html for site-root (to mimic MT, possibly look at allowing other structures)
# if html dir exists, exit - let's not break anything!
if [ -d "$foldername" ]; then
    echo "Oops, looks like you already have a directory with that name here."
    read -p "Do you want to overwrite it? (y/n)" -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        mv $foldername "$foldername"_old
        echo "wpWizard has renamed your existing folder to '$foldername'_old for safe keeping."
    else
        echo -e "\033[31mTo protect your files, wpwizard will now quit. If you meant to run it here, just rename/remove your existing folder, and it will run."
        echo -e "\033[0m"
        echo "exiting..."
        exit
    fi
fi

# Set path of script for our library files
#dir=`dirname $0`
dir=`dirname $0`

# Title the project
# Use the title for:
# DB Name
# theme name
# table prefixes
if [ ! $2 ]; then
    read -p "Give your project a name (this will be used in database creation and theme folder creation): " project
else
    project=$2
fi

# See if there's a config file, if not offer to create one based on the options the 
# user chooses during the setup
# if [ ! -e "$dir/conf/config.conf" ]; then
#   read -p 'Would you like to save your config for next time? [Y/n]' response
#   if [[ $response =~ ^([nN][oO]|[nN])$ ]]
#       then
#               config="NO"
#       else
#           config='YES'
#           declare -a config_values
#           touch $dir/config.conf
#   fi
#   # Cool there's already a config file, so let's use those defaults!
#   else
#       echo "Detected a config file, using those defaults."
# fi

# Build our theme from a framework? 
if [ ! $3 ]; then
    echo "What theme framework would you like to use?"
    read -p "Options: [wolf, bones, bootstrap, blueox, html5, required, roots, _s, startbox, starkers, skeleton, talon, thematic, prometheus, custom, none]: " framework
fi

# Create html directory
if [ -z $foldername ]; then
    echo "Installing into current directory."
else
    echo "Installing into $foldername directory."
    mkdir $foldername
    cd $foldername
fi

# Init git repo and do an empty initial commit (for rebasing, thanks @evansolomon)
git init -q
git commit --allow-empty -q -m "Initial empty commit"

echo ''
echo "Downloading WordPress for you."
echo ''

# set .gitignore to ignore wp-config.local and a ton of other stuff so we can set different database variables for development vs production

echo $'wp-config.local.php \nsass-cache/ \n*.zip \nwp-content/advanced-cache.php \nwp-content/wp-cache-config.php \nwp-content/cache/* \nwp-content/backups/ \nwp-content/blogs.dir/ \nwp-content/upgrade/*' > .gitignore

# download wordpress, extract and delete original tar
if [ -z $USECURL ]; then
    curl -H "Accept-Encoding: gzip,deflate" http://wordpress.org/latest.tar.gz > latest.tar.gz
else
    wget http://wordpress.org/latest.tar.gz
fi

tar --strip-components=1 -zxf latest.tar.gz
rm latest.tar.gz
rm license.txt
rm readme.html

echo ''
echo 'WordPress had been downloaded.'
echo ''

# We succesfully added WordPress, so let's commit!
git add .
git commit --allow-empty -q -m "Installed WordPress core files."


# Use framework option
if [ "$framework" == "none" ] || [ "$framework" == "" ]; then
    framework_repo="none"
elif [ "$framework" == "blueox" ]; then
    framework_repo="git://github.com/AaronHolbrook/Blue-Ox.git"  
elif [ "$framework" == "_s" ]; then
  framework_repo="git://github.com/Automattic/_s.git"
elif [ "$framework" == "s" ]; then
  framework_repo="git://github.com/Automattic/_s.git"
elif [ "$framework" == "hooks" ]; then
  framework_repo="git@github.com:bradp/hook_s.git"
elif [ "$framework" == "hook_s" ]; then
  framework_repo="git@github.com:bradp/hook_s.git"
elif [ "$framework" == "starkers" ]; then
    framework_repo="git://github.com/viewportindustries/starkers.git"
elif [ "$framework" == "bootstrap" ]; then
    framework_repo="git://github.com/rachelbaker/bootstrapwp-Twitter-Bootstrap-for-WordPress.git"
elif [ "$framework" == "html5" ]; then
    framework_repo="git://github.com/murtaugh/HTML5-Reset-Wordpress-Theme.git"  
elif [ "$framework" == "startbox" ]; then
    framework_repo="git://github.com/brichards/StartBox.git"  
elif [ "$framework" == "bones" ]; then
    framework_repo="git://github.com/eddiemachado/bones.git"
elif [ "$framework" == "roots" ]; then
    framework_repo="git://github.com/retlehs/roots.git"
elif [ "$framework" == "reverie" ]; then
    framework_repo="git://github.com/milohuang/reverie.git"
elif [ "$framework" == "required" ]; then
    framework_repo="git://github.com/wearerequired/required-foundation.git"
elif [ "$framework" == "thematic" ]; then
    framework_repo="git://github.com/ThematicTheme/Thematic.git"    
elif [ "$framework" == "skeleton" ]; then
    framework_repo="git://github.com/simplethemes/skeleton_wp.git"          
elif [ "$framework" == "talon" ]; then
    framework_repo="git@github.com:dustyf/wp-talon.git" 
elif [ "$framework" == "prometheus" ]; then
    framework_repo="git@github.com:noeltock/prometheus.git" 
elif [ "$framework" == "wolf" ]; then
    framework_repo="git@github.com:bradp/Wolf.git"
elif [ "$framework" == "WOLF" ]; then
    framework_repo="git@github.com:bradp/Wolf.git"
elif [ "$framework" == "w" ]; then
    framework_repo="git@github.com:bradp/Wolf.git"
elif [ "$framework" == "Wolf" ]; then
    framework_repo="git@github.com:bradp/Wolf.git"
elif [ "$framework" == "custom" ]; then
  read -p "Location for custom theme: [can be git:// protocol or just a local git repository]: " framework_repo
fi


echo '' 
echo "Downloading theme for you."
echo ''


# if the user did not choose none, then add the theme to our themes folder
if [ "$framework_repo" != "none" ]; then
    # clone the repo into our new base directory
    git clone -q "$framework_repo" "wp-content/themes/"$project

    # delete the git repo that the theme came with
    rm -rf wp-content/themes/$project/.git

    git add .
    git commit --allow-empty -q -a -s -m "Installed theme framework."


    # let's clear out some of the pre-packaged themes
    rm -rf wp-content/themes/twentyten
    rm -rf wp-content/themes/twentyeleven
    rm -rf wp-content/themes/twentytwelve
    rm -rf wp-content/themes/twentlythirteen

    git add .
    git commit --allow-empty -q -a -s -m "Removed default themes"

fi


echo 'Theme framework has been installed'
echo ''


# Cool - we added our theme, let's commit!
git add .
git commit --allow-empty -q -m "Theme framework installed!"

# Clean out packaged plugins (akismet & hello dolly)
cd wp-content/plugins
rm -rf akismet
rm hello.php

git add .
git commit --allow-empty -q -a -s -m "Removed Hello-Dolly and akismet plugins"

# Install plugins that are listed in the plugins.conf file
# To add your/modify the plugins that are installed simply
# Change the plugins file to contain the slug of the plugins you want! 
for plugin in `cat $dir/plugins.conf`; do
    echo "Installing: $plugin..."
    mkdir $plugin; cd $plugin
    if [ -z $USECURL ]; then
        curl -H "Accept-Encoding: gzip,deflate" http://downloads.wordpress.org/plugin/$plugin.zip > $plugin.zip
    else
        wget -q http://downloads.wordpress.org/plugin/$plugin.zip
    fi
    
    tar --strip-components=1 -zxf $plugin.zip
    rm $plugin.zip
    git add .
    git commit --allow-empty -q -a -s -m "Installed $plugin"
    cd ..
done

# Let's add some mu-plugins! props @aaronjholbrook
cd ..
mkdir mu-plugins
cd mu-plugins
echo "<?php // mu-plugins/load.php" > load.php;

# Install plugins that are listed in the mu-plugins.conf file
# To add your/modify the plugins that are installed simply
# Change the plugins file to contain the slug of the plugins you want! 
for plugin in `cat $dir/mu-plugins.conf`; do
    echo "Installing: $plugin..."
    mkdir $plugin; cd $plugin
    if [ -z $USECURL ]; then
        curl -H "Accept-Encoding: gzip,deflate" http://downloads.wordpress.org/plugin/$plugin.zip > $plugin.zip
    else
        wget -q http://downloads.wordpress.org/plugin/$plugin.zip
    fi
    tar --strip-components=1 -zxf $plugin.zip
    rm $plugin.zip

    # Create a loader for the plugin (mu-plugins does not look in subdirectories)
    cd ..
    echo "require WPMU_PLUGIN_DIR . '/$plugin/$plugin.php';" >> load.php

    git add .
    git commit --allow-empty -q -a -s -m "Installed $plugin"
done

# cool, plugins are installed, let's commit!

cd ../../

git add .
git commit --allow-empty -q -m "All plugins installed"


echo ''
echo "Plugins installed, and I've done a commit."
echo ''

project=${project/-/_} 


echo "<?php
/**
 * The base configurations of the WordPress.
 *
 * This file has the following configurations: MySQL settings, Table Prefix,
 * Secret Keys, WordPress Language, and ABSPATH. You can find more information
 * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing
 * wp-config.php} Codex page. You can get the MySQL settings from your web host.
 *
 * This file is used by the wp-config.php creation script during the
 * installation. You don't have to use the web site, you can just copy this file
 * to \"wp-config.php\" and fill in the values.
 *
 * @package WordPress
 */
// For local development - make sure to add wp-config.local.php to your .gitignore file - this file should NOT be on the production server
if ( file_exists( dirname( __FILE__ ) . '/wp-config.local.php' ) ) {
  include( dirname( __FILE__ ) . '/wp-config.local.php' );
  define( 'WP_LOCAL_DEV', true ); 
} 
else {

    // ** MySQL settings - You can get this info from your web host ** //
    /** The name of the database for WordPress */
    define('DB_NAME', '');

    /** MySQL database username */
    define('DB_USER', '');

    /** MySQL database password */
    define('DB_PASSWORD', '');

    /** MySQL hostname */
    define('DB_HOST', '');
    
    define('WP_CACHE', true);


    /**
     * For developers: WordPress debugging mode.
     *
     * Change this to true to enable the display of notices during development.
     * It is strongly recommended that plugin and theme developers use WP_DEBUG
     * in their development environments.
     */
    define('WP_DEBUG', false);

    define('SAVEQUERIES', true);

    //Disallow edition of files throught WP editor
    define('DISALLOW_FILE_EDIT', true); 

    //Disallow install of upgrades
    define('DISALLOW_FILE_MODS',true); 


    /**
     * WordPress Database Table prefix.
     *
     * You can have multiple installations in one database if you give each a unique
     * prefix. Only numbers, letters, and underscores please!
     */
    \$table_prefix  = '"$project"_'; 

}


/** Database Charset to use in creating database tables. */
define('DB_CHARSET', 'utf8');

/** The Database Collate type. Don't change this if in doubt. */
define('DB_COLLATE', '');

/**#@-*/

/**#@+
 * Authentication Unique Keys and Salts.
 *
 * Change these to different unique phrases!
 * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
 * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
 *
 * @since 2.6.0
 */

 " > wp-config.php

curl -s https://api.wordpress.org/secret-key/1.1/salt/ >> wp-config.php;

echo "

/**
 * WordPress Localized Language, defaults to English.
 *
 * Change this to localize WordPress. A corresponding MO file for the chosen
 * language must be installed to wp-content/languages. For example, install
 * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German
 * language support.
 */
define('WPLANG', '');

/* That's all, stop editing! Happy blogging. */

/** Absolute path to the WordPress directory. */
if ( !defined('ABSPATH') )
    define('ABSPATH', dirname(__FILE__) . '/');

/** Sets up WordPress vars and included files. */
require_once(ABSPATH . 'wp-settings.php');" >> wp-config.php

# All done with wp-config.php so let's remove that wp-config-sample.php file
rm wp-config-sample.php
git add .
git commit -q -a -s -m "Removed Sample WP-Config file"

# define wp-config.local
echo "<?php
define('DB_NAME', '$project');
/** MySQL database username */
define('DB_USER', 'root');
/** MySQL database password */
define('DB_PASSWORD', 'root');
/** MySQL hostname */
define('DB_HOST', 'localhost');

// Open your eyes!
define('WP_DEBUG', true);
define('WP_DEBUG_LOG', true);
define('WP_DEBUG_DISPLAY', true);
define('SCRIPT_DEBUG', true);
define('SAVEQUERIES', true);

\$table_prefix  = 'wp_"$project"_'; 
?>" > wp-config.local.php


# cool, wp-config(s) has been created, let's commit!
git add .
git commit --allow-empty -q -am "Created wp-config & wp-config.local."


echo 'Created wp-config and wp-config.local'
echo ''

# create local database
/Applications/MAMP/Library/bin/mysql -uroot -proot -e "CREATE DATABASE $project"


#CURRENTDIR=`pwd`
########
#read -p "Do you want wpwizard to add this to your MAMP Pro vhosts file? (y/n)" -n 1 -r
#   echo ""
#   if [[ $REPLY =~ ^[Yy]$ ]]
#   then
#
#       read -p "What do you want to name the host for MAMP Pro? (example: $project.dev)" hostsname
#       if [ -z $hostsname ]; then
#           hostsname=$project.dev
#       fi
#
#       #TODO: http://stackoverflow.com/questions/12359199/automatic-virtual-hosts-with-mamp-pro
#
#       #echo "Please authenticate yourself so wpwizard can add to httpd.conf"
#
#       #alright, let's figure this out
#       echo "$VHOST" | sudo tee -a /Users/bradparbs/Library/Application\ Support/appsolute/MAMP\ PRO/httpd.confecho ''
#       echo ''
#       echo 'Added to MAMP Pro vhosts file'
#       echo ''
#   fi
########

echo ''
echo 'Database has been created'
echo ''

echo -e "\033[34m   "
echo -e '         ,/   \033[33m*\033[0m \033[34m '
echo "      _,'/_   | "
echo '      `(")' ,'/ '
echo '   _ _,-H-./ / '
echo '   \_\_\.   / '
echo '     )" |  ( '
echo '  __/   H   \__ '
echo '  \    /|\    / '
echo "   '--'|||'--'  "
echo '      ==^== '
echo -e "\033[0m "
echo '  wpWizard has completed all the tasks.'
echo '------------------------------------------------------------------------'
echo ''
